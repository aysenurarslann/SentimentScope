# -*- coding: utf-8 -*-
"""finetune_edilmis_bounti_modeli_ile_etiketlenmis_veriyi_makine_ogrenmesine_verdik(ek_olarak_svm_var).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MqFtFAwTB52fS_bSdbCdZRzUWSCtHNHz
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC  # SVM için import ekledim
from sklearn.metrics import classification_report, accuracy_score
from sklearn.pipeline import Pipeline


# Etiketlenmiş veriyi yükle
df = pd.read_csv("/content/drive/MyDrive/etiketlenmis_veri.csv")

# NaN değerleri kontrol et
print(f"Boş değer sayısı: {df['cleaned_text'].isna().sum()}")

# NaN değerleri temizle
df = df.dropna(subset=['cleaned_text'])  # NaN içeren satırları sil
# VEYA
df['cleaned_text'] = df['cleaned_text'].fillna('')  # NaN değerleri boş string ile doldur

# Metin verisini ve BERT'in ürettiği etiketleri al
X = df["cleaned_text"]  # veya "text" sütunu
y = df["predicted_label"]  # BERT'in ürettiği etiketler

# Veriyi train ve test olarak böl
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


# 1. Random Forest ile sınıflandırma
rf_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=5000, ngram_range=(1, 2))),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

print("Random Forest modeli eğitiliyor...")
rf_pipeline.fit(X_train, y_train)

# Test verisinde tahmin yap
rf_predictions = rf_pipeline.predict(X_test)
print("\nRandom Forest Sonuçları:")
print(f"Doğruluk (Accuracy): {accuracy_score(y_test, rf_predictions):.4f}")
print(classification_report(y_test, rf_predictions))

# 2. k-NN ile sınıflandırma
knn_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=3000)),
    ('classifier', KNeighborsClassifier(n_neighbors=5))
])

print("\nkNN modeli eğitiliyor...")
knn_pipeline.fit(X_train, y_train)

# Test verisinde tahmin yap
knn_predictions = knn_pipeline.predict(X_test)
print("\nk-NN Sonuçları:")
print(f"Doğruluk (Accuracy): {accuracy_score(y_test, knn_predictions):.4f}")
print(classification_report(y_test, knn_predictions))

# 3. SVM ile sınıflandırma - YENİ EKLENEN BÖLÜM
svm_pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=5000, ngram_range=(1, 2))),
    ('classifier', SVC(kernel='linear', probability=True, random_state=42))
])

print("\nSVM modeli eğitiliyor...")
svm_pipeline.fit(X_train, y_train)

# Test verisinde tahmin yap
svm_predictions = svm_pipeline.predict(X_test)
print("\nSVM Sonuçları:")
print(f"Doğruluk (Accuracy): {accuracy_score(y_test, svm_predictions):.4f}")
print(classification_report(y_test, svm_predictions))

# Tüm modellerin sonuçlarını karşılaştır
print("\nModellerin Karşılaştırması:")
print(f"Random Forest Doğruluk: {accuracy_score(y_test, rf_predictions):.4f}")
print(f"k-NN Doğruluk: {accuracy_score(y_test, knn_predictions):.4f}")
print(f"SVM Doğruluk: {accuracy_score(y_test, svm_predictions):.4f}")  # SVM sonucu eklendi

