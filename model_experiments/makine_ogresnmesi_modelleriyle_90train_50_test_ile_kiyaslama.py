# -*- coding: utf-8 -*-
"""makine_ogresnmesi_modelleriyle_90train_50_test_ile kiyaslama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cwmeBDT7w9gofDX6s0My_YDoppL0EDY3
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from tqdm import tqdm

# Yolları ayarlayın
TRAIN_DATA_PATH = "/content/drive/MyDrive/30_data_every_each_class_labeled_tweets.csv"  # Eğitim veri setinizin yolu
TEST_DATA_PATH = "/content/drive/MyDrive/random_50_labeled_tweets.csv"  # Test veri setinizin yolu

# Metin temizleme fonksiyonu
def clean_text(text):
    if not isinstance(text, str):
        return ""
    import re
    text = text.lower()
    text = re.sub(r'https?://\S+|www\.\S+', ' ', text)
    text = re.sub(r'@\w+', ' ', text)
    text = re.sub(r'#(\w+)', r'\1', text)
    text = re.sub(r'[^\w\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Test veri setini yükle
print("Test veri seti yükleniyor...")
test_df = pd.read_csv(TEST_DATA_PATH)

# Test veri setindeki sütun isimlerini ayarla
test_text_column = "text"
test_label_column = "sentiment"

# Eğitim veri setini yükle
print("Eğitim veri seti yükleniyor...")
train_df = pd.read_csv(TRAIN_DATA_PATH)

# Eğitim veri setindeki sütun isimlerini ayarla
train_text_column = "tweet"
train_label_column = "label"

print(f"Eğitim veri seti: '{train_text_column}' ve '{train_label_column}' sütunları kullanılıyor.")
print(f"Test veri seti: '{test_text_column}' ve '{test_label_column}' sütunları kullanılıyor.")

# Metinleri temizle
test_df["cleaned_text"] = test_df[test_text_column].apply(clean_text)
train_df["cleaned_text"] = train_df[train_text_column].apply(clean_text)

# ÖNEMLİ: ETİKET UYUMSUZLUĞUNU DÜZELT - Test etiketlerini küçük harfe çevir
test_df[test_label_column] = test_df[test_label_column].str.lower()

# Özellik ve etiketleri ayır
X_train = train_df["cleaned_text"]
y_train = train_df[train_label_column]
X_test = test_df["cleaned_text"]
y_test = test_df[test_label_column]

print(f"Eğitim veri seti boyutu: {len(train_df)}")
print(f"Test veri seti boyutu: {len(test_df)}")

# Etiket dağılımını göster
print("\nEğitim veri seti etiket dağılımı:")
print(train_df[train_label_column].value_counts())
print("\nTest veri seti etiket dağılımı (düzeltilmiş):")
print(test_df[test_label_column].value_counts())

# Klasik ML modelleri
models = {
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVM": SVC(kernel='linear', probability=True, random_state=42),
    "Naive Bayes": MultinomialNB()
}

# YENİ: Tüm metinleri birleştirerek daha iyi bir vektörleştirici eğit
print("\nTF-IDF özellikleri çıkarılıyor...")
all_texts = pd.concat([X_train, X_test])
tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))
tfidf.fit(all_texts)  # Tüm metin verisi üzerinde fit et

# Dönüştürme işlemini ayrı ayrı yap
X_train_tfidf = tfidf.transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Modelleri eğit ve test et
ml_results = {}

for name, model in models.items():
    print(f"\n{name} modeli eğitiliyor...")
    model.fit(X_train_tfidf, y_train)

    print(f"{name} modeli test ediliyor...")
    y_pred = model.predict(X_test_tfidf)

    # Performans ölçümü
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)

    ml_results[name] = {
        "accuracy": accuracy,
        "report": report,
        "predictions": y_pred
    }

    print(f"{name} Doğruluk: {accuracy:.4f}")
    print(classification_report(y_test, y_pred))
    print("-" * 50)

# Sonuçları karşılaştır
print("\nModel Karşılaştırması (Doğruluk):")
for name, result in ml_results.items():
    print(f"{name}: {result['accuracy']:.4f}")

# Sonuçları kaydet
result_df = test_df.copy()
for name, result in ml_results.items():
    result_df[f"{name.lower().replace(' ', '_')}_prediction"] = result["predictions"]

# Modellerin doğru tahmin ettiği örnekleri işaretle
for name in models.keys():
    model_name = name.lower().replace(' ', '_')
    result_df[f"{model_name}_correct"] = result_df[f"{model_name}_prediction"] == result_df[test_label_column]

# Sonuçları kaydet
result_df.to_csv("/content/drive/MyDrive/ml_models_comparison_results.csv", index=False)
print("Sonuçlar 'ml_models_comparison_results.csv' dosyasına kaydedildi.")

# Görselleştirme
try:
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Doğruluk karşılaştırması
    accuracies = {name: result["accuracy"] for name, result in ml_results.items()}

    plt.figure(figsize=(10, 6))
    sns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()))
    plt.title('Klasik ML Modelleri Doğruluk Karşılaştırması')
    plt.ylabel('Doğruluk (Accuracy)')
    plt.ylim(0, 1)
    for i, v in enumerate(accuracies.values()):
        plt.text(i, v+0.01, f"{v:.4f}", ha='center')
    plt.tight_layout()
    plt.savefig("/content/drive/MyDrive/ml_models_comparison.png")
    print("Karşılaştırma grafiği 'ml_models_comparison.png' olarak kaydedildi.")

    # Sınıf bazında F1 skorları
    plt.figure(figsize=(12, 8))

    # Her model için sınıf bazında F1 skorlarını çıkar
    classes = list(ml_results[list(ml_results.keys())[0]]["report"].keys())
    classes = [c for c in classes if c not in ('accuracy', 'macro avg', 'weighted avg')]

    x = np.arange(len(classes))
    width = 0.2
    multiplier = 0

    for name, result in ml_results.items():
        f1_scores = [result["report"][label]["f1-score"] for label in classes]
        offset = width * multiplier
        plt.bar(x + offset, f1_scores, width, label=name)
        multiplier += 1

    plt.xlabel('Sınıflar')
    plt.ylabel('F1 Skoru')
    plt.title('Modellerin Sınıf Bazında F1 Skorları')
    plt.xticks(x + width, classes)
    plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=3)
    plt.tight_layout()
    plt.savefig("/content/drive/MyDrive/ml_models_f1_comparison.png")
    print("Sınıf bazında F1 skoru grafiği 'ml_models_f1_comparison.png' olarak kaydedildi.")

except:
    print("Görselleştirme oluşturulamadı. matplotlib ve seaborn paketlerini yüklediğinizden emin olun.")

# En yanlış tahmin edilen örnekleri analiz et
print("\nEn çok yanlış tahmin edilen örnekler:")
all_correct = True
for name in models.keys():
    model_name = name.lower().replace(' ', '_')
    all_correct = all_correct & result_df[f"{model_name}_correct"]

wrong_predictions = result_df[~all_correct].copy()
wrong_predictions["num_wrong_models"] = 0

for name in models.keys():
    model_name = name.lower().replace(' ', '_')
    wrong_predictions["num_wrong_models"] += (~wrong_predictions[f"{model_name}_correct"]).astype(int)

# En çok modelin yanlış tahmin ettiği örnekleri göster
top_wrong = wrong_predictions.sort_values("num_wrong_models", ascending=False).head(10)
print(f"\nTüm modellerin en çok zorlandığı {len(top_wrong)} örnek:")

for i, row in top_wrong.iterrows():
    print(f"Metin: {row[test_text_column]}")
    print(f"Gerçek etiket: {row[test_label_column]}")
    for name in models.keys():
        model_name = name.lower().replace(' ', '_')
        print(f"{name} tahmini: {row[f'{model_name}_prediction']} {'✓' if row[f'{model_name}_correct'] else '✗'}")
    print("-" * 80)

